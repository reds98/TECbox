/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, Directive, Input, ViewEncapsulation, } from '@angular/core';
import { merge, of as observableOf, Subscription } from 'rxjs';
import { matRangeDatepickerIntl } from './datepicker-intl';
/**
 * Can be used to override the icon of a `matDatepickerToggle`.
 */
var matRangeDatepickerToggleIcon = /** @class */ (function () {
    function matRangeDatepickerToggleIcon() {
    }
    return matRangeDatepickerToggleIcon;
}());
export { matRangeDatepickerToggleIcon };
matRangeDatepickerToggleIcon.decorators = [
    { type: Directive, args: [{
                selector: '[matDatepickerToggleIcon]',
            },] },
];
function matRangeDatepickerToggleIcon_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    matRangeDatepickerToggleIcon.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    matRangeDatepickerToggleIcon.ctorParameters;
}
/**
 * @template D
 */
var matRangeDatepickerToggle = /** @class */ (function () {
    /**
     * @param {?} _intl
     * @param {?} _changeDetectorRef
     */
    function matRangeDatepickerToggle(_intl, _changeDetectorRef) {
        this._intl = _intl;
        this._changeDetectorRef = _changeDetectorRef;
        this._stateChanges = Subscription.EMPTY;
    }
    Object.defineProperty(matRangeDatepickerToggle.prototype, "disabled", {
        /**
         * Whether the toggle button is disabled.
         * @return {?}
         */
        get: function () {
            return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;
        },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this._disabled = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    matRangeDatepickerToggle.prototype.ngOnChanges = function (changes) {
        if (changes["datepicker"]) {
            this._watchStateChanges();
        }
    };
    /**
     * @return {?}
     */
    matRangeDatepickerToggle.prototype.ngOnDestroy = function () {
        this._stateChanges.unsubscribe();
    };
    /**
     * @return {?}
     */
    matRangeDatepickerToggle.prototype.ngAfterContentInit = function () {
        this._watchStateChanges();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    matRangeDatepickerToggle.prototype._open = function (event) {
        if (this.datepicker && !this.disabled) {
            this.datepicker.open();
            event.stopPropagation();
        }
    };
    /**
     * @return {?}
     */
    matRangeDatepickerToggle.prototype._watchStateChanges = function () {
        var _this = this;
        var /** @type {?} */ datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();
        var /** @type {?} */ inputDisabled = this.datepicker && this.datepicker._datepickerInput ?
            this.datepicker._datepickerInput._disabledChange : observableOf();
        var /** @type {?} */ datepickerToggled = this.datepicker ?
            merge(this.datepicker.openedStream, this.datepicker.closedStream) :
            observableOf();
        this._stateChanges.unsubscribe();
        this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled, datepickerToggled).subscribe(function () { return _this._changeDetectorRef.markForCheck(); });
    };
    return matRangeDatepickerToggle;
}());
export { matRangeDatepickerToggle };
matRangeDatepickerToggle.decorators = [
    { type: Component, args: [{
                moduleId: module.id,
                selector: 'mat-range-datepicker-toggle',
                template: "<button mat-icon-button type=\"button\" [attr.aria-label]=\"_intl.openCalendarLabel\"\n        [disabled]=\"disabled\" (click)=\"_open($event)\">\n\n    <svg\n            *ngIf=\"!_customIcon\"\n            class=\"mat-datepicker-toggle-default-icon\"\n            viewBox=\"0 0 24 24\"\n            width=\"24px\"\n            height=\"24px\"\n            fill=\"currentColor\"\n            focusable=\"false\">\n        <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n        <path d=\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\"/>\n    </svg>\n\n    <ng-content select=\"[matDatepickerToggleIcon]\"></ng-content>\n</button>\n",
                styles: [".mat-form-field-appearance-legacy .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-datepicker-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-datepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-datepicker-toggle-default-icon{margin:auto}"],
                host: {
                    'class': 'mat-datepicker-toggle',
                    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',
                },
                exportAs: 'matDatepickerToggle',
                encapsulation: ViewEncapsulation.None,
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
            },] },
];
/** @nocollapse */
matRangeDatepickerToggle.ctorParameters = function () { return [
    { type: matRangeDatepickerIntl, },
    { type: ChangeDetectorRef, },
]; };
matRangeDatepickerToggle.propDecorators = {
    "datepicker": [{ type: Input, args: ['for',] },],
    "_customIcon": [{ type: ContentChild, args: [matRangeDatepickerToggleIcon,] },],
    "disabled": [{ type: Input },],
};
function matRangeDatepickerToggle_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    matRangeDatepickerToggle.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    matRangeDatepickerToggle.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    matRangeDatepickerToggle.propDecorators;
    /**
     * Datepicker instance that the button will toggle.
     * @type {?}
     */
    matRangeDatepickerToggle.prototype.datepicker;
    /**
     * Custom icon set by the consumer.
     * @type {?}
     */
    matRangeDatepickerToggle.prototype._customIcon;
    /** @type {?} */
    matRangeDatepickerToggle.prototype._stateChanges;
    /** @type {?} */
    matRangeDatepickerToggle.prototype._disabled;
    /** @type {?} */
    matRangeDatepickerToggle.prototype._intl;
    /** @type {?} */
    matRangeDatepickerToggle.prototype._changeDetectorRef;
}
//# sourceMappingURL=datepicker-toggle.js.map
