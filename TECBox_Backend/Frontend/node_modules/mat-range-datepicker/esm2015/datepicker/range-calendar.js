/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Optional, Output, ViewEncapsulation, } from '@angular/core';
import { createMissingDateImplError } from './datepicker-errors';
import { matRangeDatepickerIntl } from './datepicker-intl';
import { DateAdapter } from '../datetime/date-adapter';
import { MAT_DATE_FORMATS } from '../datetime/date-formats';
/**
 * A calendar that is used as part of the datepicker.
 * \@docs-private
 * @template D
 */
export class RangeCalendar {
    /**
     * @param {?} _intl
     * @param {?} _dateAdapter
     * @param {?} _dateFormats
     */
    constructor(_intl, _dateAdapter, _dateFormats) {
        this._dateAdapter = _dateAdapter;
        this._dateFormats = _dateFormats;
        this.selectedChange = new EventEmitter();
        this.dateRangesChange = new EventEmitter();
        this.yearSelected = new EventEmitter();
        this.monthSelected = new EventEmitter();
        this._userSelection = new EventEmitter();
        /**
         * Whenever user already selected start of dates interval.
         */
        this._beginDateSelected = false;
        if (!this._dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        if (!this._dateFormats) {
            throw createMissingDateImplError('MAT_DATE_FORMATS');
        }
    }
    /**
     * @param {?} date
     * @return {?}
     */
    _dateSelected(date) {
        if (this.rangeMode) {
            if (!this._beginDateSelected) {
                this._beginDateSelected = true;
                this.beginDate = date;
                this.endDate = date;
            }
            else {
                this._beginDateSelected = false;
                if (this._dateAdapter.compareDate(/** @type {?} */ (this.beginDate), date) <= 0) {
                    this.dateRangesChange.emit({ begin: /** @type {?} */ (this.beginDate), end: date });
                }
                else {
                    this.dateRangesChange.emit({ begin: date, end: /** @type {?} */ (this.beginDate) });
                }
            }
        }
        else if (!this._dateAdapter.sameDate(date, this.selected)) {
            this.selectedChange.emit(date);
        }
    }
    /**
     * @param {?} quarter
     * @return {?}
     */
    _getQuarterDates(quarter) {
        const /** @type {?} */ _year = this._dateAdapter.getYear(this._dateAdapter.today());
        const /** @type {?} */ begin = this._dateAdapter.createDate(_year, (quarter - 1) * 3, 1);
        const /** @type {?} */ end = (quarter === 4
            ?
                this._dateAdapter.addCalendarDays(this._dateAdapter.createDate(_year + 1, 0, 1), -1)
            :
                this._dateAdapter.addCalendarDays(this._dateAdapter.createDate(_year, quarter * 3, 1), -1));
        return ({ begin, end });
    }
    /**
     * @param {?} quarter
     * @return {?}
     */
    selectQuater(quarter) {
        this.dateRangesChange.emit(this._getQuarterDates(quarter));
    }
    /**
     * @param {?} quarter
     * @return {?}
     */
    checkQuarterSelected(quarter) {
        const { begin, end } = this._getQuarterDates(quarter);
        return (this._dateAdapter.sameDate(begin, this.beginDate)
            &&
                this._dateAdapter.sameDate(end, this.endDate));
    }
    /**
     * @return {?}
     */
    onCancel() {
        this._userSelection.emit();
    }
    /**
     * @return {?}
     */
    onApply() {
        this._userSelection.emit({ apply: true });
    }
}
RangeCalendar.decorators = [
    { type: Component, args: [{
                moduleId: module.id,
                selector: 'range-calendar',
                template: `<div class="from-date-sec">
  <sat-calendar cdkTrapFocus
    [id]="id"
    [ngClass]="ngClass"
    [startAt]="startAt"
    [startView]="startView"
    [minDate]="minDate"
    [maxDate]="maxDate"
    [dateFilter]="dateFilter"
    [beginDate]="beginDate"
    [endDate]="endDate"
    [rangeMode]="rangeMode"           
    [selected]="selected"
    (selectedChange)="selectedChange.emit($event)"
    (dateSelected)="_dateSelected($event)"
    (yearSelected)="yearSelected.emit($event)"
    (monthSelected)="monthSelected.emit($event)"
    >
  </sat-calendar>
</div>
<div class="end-date-sec">
  <sat-calendar cdkTrapFocus
    [id]="id"
    [ngClass]="ngClass"
    [startAt]="startAt"
    [startView]="startView"
    [minDate]="minDate"
    [maxDate]="maxDate"
    [dateFilter]="dateFilter"
    [beginDate]="beginDate"
    [endDate]="endDate"
    [rangeMode]="rangeMode"
    [selected]="selected"
    (selectedChange)="selectedChange.emit($event)"
    (dateSelected)="_dateSelected($event)"
    (yearSelected)="yearSelected.emit($event)"
    (monthSelected)="monthSelected.emit($event)"
    [nextMonth]="true"
    >
  </sat-calendar>
</div>
<div class="quick-select-sec">
  <span class="select-title">Quick Select</span>
  <ul>
    <li><button mat-button (click)="selectQuater(1)" [class.active]="checkQuarterSelected(1)">Quarter 1</button></li>
    <li><button mat-button (click)="selectQuater(2)" [class.active]="checkQuarterSelected(2)">Quarter 2</button></li>
    <li><button mat-button (click)="selectQuater(3)" [class.active]="checkQuarterSelected(3)">Quarter 3</button></li>
    <li><button mat-button (click)="selectQuater(4)" [class.active]="checkQuarterSelected(4)">Quarter 4</button></li>
  </ul>
</div>
<div class="calendar-button-sec">
  <button mat-button color="primary" (click)="onCancel()">Cancel</button>
  <button mat-raised-button color="primary" (click)="onApply()">Apply</button>
</div>`,
                styles: [`.mat-calendar{display:block}.mat-calendar-header{padding:8px 8px 0}.mat-calendar-content{padding:0 8px 8px;outline:0}.mat-calendar-controls{display:flex;margin:5% calc(33% / 7 - 16px)}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0}.mat-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0 0 0 5px;vertical-align:middle}.mat-calendar-arrow.mat-calendar-invert{-webkit-transform:rotate(180deg);transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}.mat-calendar-next-button,.mat-calendar-previous-button{position:relative}.mat-calendar-next-button::after,.mat-calendar-previous-button::after{top:0;left:0;right:0;bottom:0;position:absolute;content:'';margin:15.5px;border:0 solid currentColor;border-top-width:2px}[dir=rtl] .mat-calendar-next-button,[dir=rtl] .mat-calendar-previous-button{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.mat-calendar-previous-button::after{border-left-width:2px;-webkit-transform:translateX(2px) rotate(-45deg);transform:translateX(2px) rotate(-45deg)}.mat-calendar-next-button::after{border-right-width:2px;-webkit-transform:translateX(-2px) rotate(45deg);transform:translateX(-2px) rotate(45deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:'';position:absolute;top:0;left:-8px;right:-8px;height:1px}`],
                host: {
                    'class': 'range-calendar',
                },
                exportAs: 'matRangeCalendar',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
            },] },
];
/** @nocollapse */
RangeCalendar.ctorParameters = () => [
    { type: matRangeDatepickerIntl, },
    { type: DateAdapter, decorators: [{ type: Optional },] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] },] },
];
RangeCalendar.propDecorators = {
    "id": [{ type: Input },],
    "ngClass": [{ type: Input },],
    "startAt": [{ type: Input },],
    "startView": [{ type: Input },],
    "minDate": [{ type: Input },],
    "maxDate": [{ type: Input },],
    "dateFilter": [{ type: Input },],
    "beginDate": [{ type: Input },],
    "endDate": [{ type: Input },],
    "rangeMode": [{ type: Input },],
    "selected": [{ type: Input },],
    "selectedChange": [{ type: Output },],
    "dateRangesChange": [{ type: Output },],
    "yearSelected": [{ type: Output },],
    "monthSelected": [{ type: Output },],
    "_userSelection": [{ type: Output },],
};
function RangeCalendar_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    RangeCalendar.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    RangeCalendar.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    RangeCalendar.propDecorators;
    /** @type {?} */
    RangeCalendar.prototype.id;
    /** @type {?} */
    RangeCalendar.prototype.ngClass;
    /** @type {?} */
    RangeCalendar.prototype.startAt;
    /** @type {?} */
    RangeCalendar.prototype.startView;
    /** @type {?} */
    RangeCalendar.prototype.minDate;
    /** @type {?} */
    RangeCalendar.prototype.maxDate;
    /** @type {?} */
    RangeCalendar.prototype.dateFilter;
    /** @type {?} */
    RangeCalendar.prototype.beginDate;
    /** @type {?} */
    RangeCalendar.prototype.endDate;
    /** @type {?} */
    RangeCalendar.prototype.rangeMode;
    /** @type {?} */
    RangeCalendar.prototype.selected;
    /** @type {?} */
    RangeCalendar.prototype.selectedChange;
    /** @type {?} */
    RangeCalendar.prototype.dateRangesChange;
    /** @type {?} */
    RangeCalendar.prototype.yearSelected;
    /** @type {?} */
    RangeCalendar.prototype.monthSelected;
    /** @type {?} */
    RangeCalendar.prototype._userSelection;
    /**
     * Whenever user already selected start of dates interval.
     * @type {?}
     */
    RangeCalendar.prototype._beginDateSelected;
    /** @type {?} */
    RangeCalendar.prototype._dateAdapter;
    /** @type {?} */
    RangeCalendar.prototype._dateFormats;
}
//# sourceMappingURL=range-calendar.js.map
